#include<iostream>
using namespace std;
typedef pair<int, int> iPair; 
#define INF 99999999;

class graph(){
	int V;
	list<pair<int, int>> *adj;

public:
	addEdge(int u, int v, int w);
	shortestpath(int s);
};

gaph::graph(int V)
{
	this-> V = V;
	adj = new list<ipair> [V];
}

void graph::addEdge(int u, int v, int w)
{
	adj[u].push_back(v,w);
	adj[v].push_back(u,w);
}

void graph::shortestpath(int src)
{
	priority_queue<ipair, vector<ipair>, greater<ipair>> pq;
	vector<int> dist(V, INF);
    pq.push_back(make_pair(0, src));
    dist[src] = 0;
    while(!pq.empty())
    {
    	int u = pq.top().second();
    	pq.pop();
    	list<int, int> :: iterator i;
    	for (int i = adj[u].begin(); i < adj[u].end(); ++i)
    	{
    		int dst = (*i).first();
    		int weight = (*i).second();
    		if (dist[dst] > dist[u] + weight)
    		{
    			dist[dst] = dist[u] + weight;
    			pq.push_back(make_pair(dist[dst], dst));
    		}
    	}
    }
    for (int l = 0; l < V; ++l)
    {
    	cout<<dist[l]<<" ";
    }
}

int main()
{
	int V = 9;
	graph g(V);
	g.addEdge(0, 1, 4); 
    g.addEdge(0, 7, 8); 
    g.addEdge(1, 2, 8); 
    g.addEdge(1, 7, 11); 
    g.addEdge(2, 3, 7); 
    g.addEdge(2, 8, 2); 
    g.addEdge(2, 5, 4); 
    g.addEdge(3, 4, 9); 
    g.addEdge(3, 5, 14); 
    g.addEdge(4, 5, 10); 
    g.addEdge(5, 6, 2); 
    g.addEdge(6, 7, 1); 
    g.addEdge(6, 8, 6); 
    g.addEdge(7, 8, 7); 
  
    g.shortestpath(0); 
	return 0;
}
