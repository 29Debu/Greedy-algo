#include<iostream>
using namspace std;
#define V 5  
int main()  
{  
    /* Let us create the following graph  
        2 3  
    (0)--(1)--(2)  
    | / \ |  
    6| 8/ \5 |7  
    | / \ |  
    (3)-------(4)  
            9     */
    int graph[V][V] = { { 0, 2, 0, 6, 0 },  
                        { 2, 0, 3, 8, 5 },  
                        { 0, 3, 0, 0, 7 },  
                        { 6, 8, 0, 0, 9 },  
                        { 0, 5, 7, 9, 0 } };  
  
    // Print the solution  
    primMST(graph);  
  
    return 0;  
} 

void printMST(int parent[], int graph[V][V])  
{  
    cout<<"Edge \tWeight\n";  
    for (int i = 1; i < V; i++)  
        cout<<parent[i]<<" - "<<i<<" \t"<<graph[i][parent[i]]<<" \n";  
}  


int mini(int dist[], bool addd[])
{
	int index, minimum = INT_MAX;
	for (int v = 0; i < V; ++v)
		if (addd[v] == false && dist[v] < minimum)
		{
			minimum = dist[v];
			index = v;
		}
}

void primMST(int graph[V][V])
{
	bool addd[V];
	int parent[V], dist[V];
	for (int i = 0; i < V; ++i)
	{
		addd[i] = false;
		parent[i] = -1;
		dist[i] = INT_MAX;
	}
	dist[0] = 0;
	for (int k = 0; i < V; ++k)
	{
	int u = mini(dist, addd);
	addd[u] = true;
	for (int v = 0; i < V; ++v)
	{
		if (dist[v] > graph[u][v] && graph[u][v]!=0 && addd[v] == false)
		{
			dist[v] = graph[u][v];
			parent[v] = u;
		}
	}
    }
    printMST(parent, graph);  

}
